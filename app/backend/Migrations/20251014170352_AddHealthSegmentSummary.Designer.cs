// <auto-generated />
using System;
using IoTM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IoTM.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251014170352_AddHealthSegmentSummary")]
    partial class AddHealthSegmentSummary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IoTM.Models.Allergy", b =>
                {
                    b.Property<Guid>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Allergen")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("AllergyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Reaction")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergyId");

                    b.HasIndex("UserId");

                    b.ToTable("allergies");
                });

            modelBuilder.Entity("IoTM.Models.ConnectedDevice", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiTokenEncrypted")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceIdentifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SyncFrequencyMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("connected_devices");
                });

            modelBuilder.Entity("IoTM.Models.FamilyHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AgeAtDiagnosis")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("HistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("family_history");
                });

            modelBuilder.Entity("IoTM.Models.FrequencyRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<int>("FrequencyMonths")
                        .HasColumnType("integer");

                    b.Property<Guid>("GuidelineId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAge")
                        .HasColumnType("integer");

                    b.Property<int?>("PregnancyApplicable")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScreeningGuidelineGuidelineId")
                        .HasColumnType("uuid");

                    b.Property<int?>("SexApplicable")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningGuidelineGuidelineId");

                    b.ToTable("FrequencyRule");
                });

            modelBuilder.Entity("IoTM.Models.HealthAlert", b =>
                {
                    b.Property<Guid>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ActionTaken")
                        .HasColumnType("boolean");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("TriggeredByMetricId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TriggeredByScreeningId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AlertId");

                    b.HasIndex("TriggeredByMetricId");

                    b.HasIndex("TriggeredByScreeningId");

                    b.HasIndex(new[] { "Severity", "CreatedAt" }, "idx_severity_created");

                    b.HasIndex(new[] { "UserId", "IsRead" }, "idx_user_unread");

                    b.ToTable("health_alerts");
                });

            modelBuilder.Entity("IoTM.Models.HealthMetric", b =>
                {
                    b.Property<Guid>("MetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataQuality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,4)");

                    b.HasKey("MetricId");

                    b.HasIndex("DeviceId");

                    b.HasIndex(new[] { "RecordedAt" }, "idx_recorded_at");

                    b.HasIndex(new[] { "UserId", "MetricType", "RecordedAt" }, "idx_user_metric_time");

                    b.ToTable("health_metrics");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentBPM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageBpm")
                        .HasColumnType("double precision");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<double>("StandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HealthSegmentBPMs");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentBloodPressure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageDiastolic")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageSystolic")
                        .HasColumnType("double precision");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<double>("DiastolicStandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("SystolicStandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HealthSegmentBloodPressures");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentSleep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HealthSegmentSleeps");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentSpO2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageSpO2")
                        .HasColumnType("double precision");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<double>("StandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HealthSegmentSpO2s");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AverageBpm")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageDiastolic")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageSpO2")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageSystolic")
                        .HasColumnType("double precision");

                    b.Property<double?>("BloodPressureStandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<double?>("BpmStandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<double?>("SpO2StandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HealthSegmentSummarys");
                });

            modelBuilder.Entity("IoTM.Models.LifestyleFactor", b =>
                {
                    b.Property<Guid>("LifestyleFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Factor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Selection")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LifestyleFactorId");

                    b.HasIndex("UserId");

                    b.ToTable("lifestyle_factors");
                });

            modelBuilder.Entity("IoTM.Models.MedicalCondition", b =>
                {
                    b.Property<Guid>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConditionCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DiagnosedDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ConditionId");

                    b.HasIndex("UserId");

                    b.ToTable("medical_conditions");
                });

            modelBuilder.Entity("IoTM.Models.Medication", b =>
                {
                    b.Property<Guid>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dosage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Frequency")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PrescribingDoctor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("MedicationId");

                    b.HasIndex("UserId");

                    b.ToTable("medications");
                });

            modelBuilder.Entity("IoTM.Models.NewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NewsArticles");
                });

            modelBuilder.Entity("IoTM.Models.ScheduledScreening", b =>
                {
                    b.Property<Guid>("ScheduledScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("ScheduledDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ScreeningId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ScheduledScreeningId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("ScheduledScreenings");
                });

            modelBuilder.Entity("IoTM.Models.ScreeningGuideline", b =>
                {
                    b.Property<Guid>("GuidelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConditionsExcluded")
                        .HasColumnType("text");

                    b.Property<string>("ConditionsRequired")
                        .HasColumnType("text");

                    b.Property<string>("Cost")
                        .HasColumnType("text");

                    b.Property<string>("CountrySpecific")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultFrequencyMonths")
                        .HasColumnType("integer");

                    b.Property<string>("Delivery")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImportanceLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAge")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PregnancyApplicable")
                        .HasColumnType("integer");

                    b.Property<string>("RiskFactors")
                        .HasColumnType("text");

                    b.Property<string>("ScreeningType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SexApplicable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceOrganisation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("GuidelineId");

                    b.ToTable("screening_guidelines");
                });

            modelBuilder.Entity("IoTM.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsOnboarded")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("OnboardingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("IoTM.Models.UserMedicalProfile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivityLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AlcoholFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BloodType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("HeightCm")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InsuranceProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PregnancyStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryDoctorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PrimaryDoctorPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SmokingStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_medical_profiles");
                });

            modelBuilder.Entity("IoTM.Models.UserScreening", b =>
                {
                    b.Property<Guid>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("CompletedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GuidelineId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("NextDueDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Results")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ScreeningId");

                    b.HasIndex("GuidelineId");

                    b.HasIndex("UserId");

                    b.ToTable("user_screenings");
                });

            modelBuilder.Entity("IoTM.Models.Allergy", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("Allergies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.ConnectedDevice", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("ConnectedDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.FamilyHistory", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("FamilyHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.FrequencyRule", b =>
                {
                    b.HasOne("IoTM.Models.ScreeningGuideline", null)
                        .WithMany("FrequencyRules")
                        .HasForeignKey("ScreeningGuidelineGuidelineId");
                });

            modelBuilder.Entity("IoTM.Models.HealthAlert", b =>
                {
                    b.HasOne("IoTM.Models.HealthMetric", "HealthMetric")
                        .WithMany()
                        .HasForeignKey("TriggeredByMetricId");

                    b.HasOne("IoTM.Models.UserScreening", "UserScreening")
                        .WithMany("HealthAlerts")
                        .HasForeignKey("TriggeredByScreeningId");

                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("HealthAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthMetric");

                    b.Navigation("User");

                    b.Navigation("UserScreening");
                });

            modelBuilder.Entity("IoTM.Models.HealthMetric", b =>
                {
                    b.HasOne("IoTM.Models.ConnectedDevice", "Device")
                        .WithMany("HealthMetrics")
                        .HasForeignKey("DeviceId");

                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("HealthMetrics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentBPM", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentBloodPressure", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentSleep", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentSpO2", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.HealthSegments.HealthSegmentSummary", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.LifestyleFactor", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.MedicalCondition", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("MedicalConditions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.Medication", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("Medications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.ScheduledScreening", b =>
                {
                    b.HasOne("IoTM.Models.UserScreening", "UserScreening")
                        .WithMany("ScheduledScreenings")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserScreening");
                });

            modelBuilder.Entity("IoTM.Models.UserMedicalProfile", b =>
                {
                    b.HasOne("IoTM.Models.User", "User")
                        .WithOne("MedicalProfile")
                        .HasForeignKey("IoTM.Models.UserMedicalProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.UserScreening", b =>
                {
                    b.HasOne("IoTM.Models.ScreeningGuideline", "Guideline")
                        .WithMany("UserScreenings")
                        .HasForeignKey("GuidelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IoTM.Models.User", "User")
                        .WithMany("UserScreenings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guideline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IoTM.Models.ConnectedDevice", b =>
                {
                    b.Navigation("HealthMetrics");
                });

            modelBuilder.Entity("IoTM.Models.ScreeningGuideline", b =>
                {
                    b.Navigation("FrequencyRules");

                    b.Navigation("UserScreenings");
                });

            modelBuilder.Entity("IoTM.Models.User", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("ConnectedDevices");

                    b.Navigation("FamilyHistories");

                    b.Navigation("HealthAlerts");

                    b.Navigation("HealthMetrics");

                    b.Navigation("MedicalConditions");

                    b.Navigation("MedicalProfile");

                    b.Navigation("Medications");

                    b.Navigation("UserScreenings");
                });

            modelBuilder.Entity("IoTM.Models.UserScreening", b =>
                {
                    b.Navigation("HealthAlerts");

                    b.Navigation("ScheduledScreenings");
                });
#pragma warning restore 612, 618
        }
    }
}
